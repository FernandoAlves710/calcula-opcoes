import streamlit as st

import numpy as np

from scipy.stats import norm

 

# Função para calcular o preço da opção usando o modelo Black-Scholes

def calcular_preco_opcao(tipo_opcao, S, K, T, r, sigma):

    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

    d2 = d1 - sigma * np.sqrt(T)

    if tipo_opcao == "Call":

        preco_opcao = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)

    else:

        preco_opcao = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

    return preco_opcao

 

# Função para calcular a grega Delta da opção usando o modelo Black-Scholes

def calcular_delta(tipo_opcao, S, K, T, r, sigma):

    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

    if tipo_opcao == "Call":

        delta = norm.cdf(d1)

    else:

        delta = norm.cdf(d1) - 1

    return delta

 

# Função para calcular a grega Gamma da opção usando o modelo Black-Scholes

def calcular_gamma(S, K, T, r, sigma):

    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

    gamma = norm.pdf(d1) / (S * sigma * np.sqrt(T))

    return gamma

 

# Função para calcular a grega Theta da opção usando o modelo Black-Scholes

def calcular_theta(tipo_opcao, S, K, T, r, sigma):

    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

    d2 = d1 - sigma * np.sqrt(T)

    if tipo_opcao == "Call":

        theta = - (S * norm.pdf(d1) * sigma) / (2 * np.sqrt(T)) - r * K * np.exp(-r * T) * norm.cdf(d2)

    else:

        theta = - (S * norm.pdf(d1) * sigma) / (2 * np.sqrt(T)) + r * K * np.exp(-r * T) * norm.cdf(-d2)

    return theta

 

# Função para calcular a grega Vega da opção usando o modelo Black-Scholes

def calcular_vega(S, K, T, r, sigma):

    d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

    vega = S * norm.pdf(d1) * np.sqrt(T)

    return vega

 

# Função para calcular a volatilidade implícita usando o modelo Black-Scholes

def calcular_volatilidade_impl(tipo_opcao, S, K, T, r, preco_opcao):

    def black_scholes(sigma):

        d1 = (np.log(S / K) + (r + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))

        d2 = d1 - sigma * np.sqrt(T)

        if tipo_opcao == "Call":

            return S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2) - preco_opcao

        else:

            return K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1) - preco_opcao

    # Utilize alguma técnica de otimização para encontrar a volatilidade implícita

    volatilidade_impl = optimize.fsolve(black_scholes, 0.2)[0]

    return volatilidade_impl

 

def main():

    st.title("Calculadora de Opções")

 

    # Widgets para seleção do tipo de opção, preço do ativo subjacente, preço de exercício, tempo até o vencimento, taxa livre de risco e volatilidade

    tipo_opcao = st.radio("Selecione o tipo de opção:", ("Call", "Put"))

    S = st.number_input("Preço do Ativo Subjacente (S):")

    K = st.number_input("Preço de Exercício (K):")

    T = st.number_input("Tempo até o Vencimento (T) em anos:")

    r = st.number_input("Taxa Livre de Risco (r):")

    sigma = st.number_input("Volatilidade (σ):")

 

    # Botão para acionar os cálculos

    if st.button("Calcular"):

        # Chama as funções de cálculo

        preco_opcao = calcular_preco_opcao(tipo_opcao, S, K, T, r, sigma)

        delta = calcular_delta(tipo_opcao, S, K, T, r, sigma)

        gamma = calcular_gamma(S, K, T, r, sigma)

        theta = calcular_theta(tipo_opcao, S, K, T, r, sigma)

        vega = calcular_vega(S, K, T, r, sigma)

        volatilidade_impl = calcular_volatilidade_impl(tipo_opcao, S, K, T, r, preco_opcao)

 

        # Exibe os resultados

        st.write("Preço da Opção:", preco_opcao)

        st.write("Delta:", delta)

        st.write("Gamma:", gamma)

        st.write("Theta:", theta)

        st.write("Vega:", vega)

        st.write("Volatilidade Implícita:", volatilidade_impl)

streamlit run app.py

 

if __name__ == "__main__":

    main()

